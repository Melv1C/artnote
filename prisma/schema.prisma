// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String
  bio           String?
  cv            String? // URL to CV file
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // Writer-specific relations
  artworks Artwork[]

  // Created/Updated relations
  artistsCreated  Artist[]       @relation("ArtistCreatedBy")
  artistsUpdated  Artist[]       @relation("ArtistUpdatedBy")
  conceptsCreated Concept[]      @relation("ConceptCreatedBy")
  conceptsUpdated Concept[]      @relation("ConceptUpdatedBy")
  placesCreated   Place[]        @relation("PlaceCreatedBy")
  placesUpdated   Place[]        @relation("PlaceUpdatedBy")
  keywordsCreated Keyword[]      @relation("KeywordCreatedBy")
  keywordsUpdated Keyword[]      @relation("KeywordUpdatedBy")
  imagesCreated   ArtworkImage[] @relation("ImageCreatedBy")
  imagesUpdated   ArtworkImage[] @relation("ImageUpdatedBy")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Artist {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  birthDate   DateTime?
  deathDate   DateTime?
  biography   String? // Rich text biography
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  updatedById String

  // Relations
  artworks  ArtworkArtist[]
  createdBy User            @relation("ArtistCreatedBy", fields: [createdById], references: [id])
  updatedBy User            @relation("ArtistUpdatedBy", fields: [updatedById], references: [id])

  @@map("artist")
}

model Concept {
  id          String   @id @default(cuid())
  name        String   @unique
  description String? // Rich text explanation for modal/popup
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String

  // Relations
  createdBy User @relation("ConceptCreatedBy", fields: [createdById], references: [id])
  updatedBy User @relation("ConceptUpdatedBy", fields: [updatedById], references: [id])

  @@map("concept")
}

model Place {
  id          String   @id @default(cuid())
  name        String
  type        String
  address     String?
  city        String?
  country     String?
  latitude    Float?
  longitude   Float?
  website     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String

  // Relations
  artworks  Artwork[]
  createdBy User      @relation("PlaceCreatedBy", fields: [createdById], references: [id])
  updatedBy User      @relation("PlaceUpdatedBy", fields: [updatedById], references: [id])

  @@map("place")
}

model Artwork {
  id           String    @id @default(cuid())
  title        String
  creationYear String? // "2023", "19th century", etc.
  medium       String? // Oil on canvas, Bronze, etc.
  dimensions   String? // "100x80 cm" 
  notice       String? // Rich text notice content
  sources      String? // Bibliography/sources
  status       String
  publishedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Analytics fields (Hybrid Approach - Phase 1)
  viewCount    Int       @default(0)
  lastViewedAt DateTime?

  // Relations
  writerId  String
  writer    User            @relation(fields: [writerId], references: [id])
  placeId   String?
  place     Place?          @relation(fields: [placeId], references: [id])
  // Many-to-many relations
  artists   ArtworkArtist[]
  images    ArtworkImage[]
  // Analytics relations
  pageViews PageView[]

  @@map("artwork")
}

model Keyword {
  id          String   @id @default(cuid())
  name        String   @unique
  definition  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String

  // Relations
  createdBy User @relation("KeywordCreatedBy", fields: [createdById], references: [id])
  updatedBy User @relation("KeywordUpdatedBy", fields: [updatedById], references: [id])

  @@map("keyword")
}

model Image {
  id       String  @id @default(cuid())
  url      String
  alt      String?
  caption  String?
  width    Int?
  height   Int?
  size     Int?
  mimeType String?

  // Relations
  artworks ArtworkImage[]

  @@map("image")
}

// Junction tables for many-to-many relationships

model ArtworkArtist {
  id        String  @id @default(cuid())
  artworkId String
  artistId  String
  role      String? // "painter", "sculptor", "attributed to", etc.

  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artist  Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([artworkId, artistId])
  @@map("artwork_artist")
}

model ArtworkImage {
  id        String  @id @default(cuid())
  artworkId String
  imageId   String
  sortOrder Int     @default(0) // For image sorting
  isMain    Boolean @default(false)
  source    String? // Source/credit for the image

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String

  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  image   Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  createdBy User @relation("ImageCreatedBy", fields: [createdById], references: [id])
  updatedBy User @relation("ImageUpdatedBy", fields: [updatedById], references: [id])

  @@unique([artworkId, imageId])
  @@map("artwork_image")
}

// =============================================================================
// ANALYTICS MODELS (Hybrid Approach)
// =============================================================================

model PageView {
  id        String   @id @default(cuid())
  artworkId String
  sessionId String? // Anonymous session tracking
  ipAddress String?
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())

  // Relations
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@index([artworkId])
  @@index([createdAt])
  @@map("page_view")
}
